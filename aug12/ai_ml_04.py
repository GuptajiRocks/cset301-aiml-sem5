# -*- coding: utf-8 -*-
"""ai-ml_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13ZVYKs-jBDY3KkTZDz3Mqm7TDijNIIU0

**Name - Arihant Gupta - E23CSEU0055**
<br>
**Batch - EB_02**
<br>
**Date - 12th Aug, 2025**
<br>
**CSET301-AIML-Lab-04**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import fetch_california_housing
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""1.	Load the California Housing dataset from sklearn.datasets into your Python environment using the fetch_california_housing() function.
2.	Convert the dataset into a Pandas DataFrame to facilitate exploration and manipulation of the features and target variable.
"""

hd = fetch_california_housing()
df = pd.DataFrame(hd.data, columns=hd.feature_names)
df['MedHouseVal'] = hd.target
print(df)

"""3.	Perform exploratory data analysis (EDA) by visualizing the distribution of key variables and checking for any correlations using tools like seaborn, matplotlib, and pandas."""

plt.figure(figsize=(10, 6))
sns.histplot(df['MedHouseVal'])
plt.title('Distribution of Median House Value')
plt.xlabel('Median House Value')
plt.ylabel('Frequency')
plt.show()
plt.close()

plt.figure(figsize=(12, 10))
corr_matrix = df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Features and Target')
plt.show()
plt.close()

"""4.	From the available features, select only the relevant numerical attributes that are expected to influence the housing price prediction (e.g., average number of rooms, median income)."""

X = df[["MedInc", "AveRooms", "AveBedrms"]]
Y = df["MedHouseVal"]
print(X)
std_s = StandardScaler()
X_scaled = std_s.fit_transform(X)

"""5.	Divide the dataset into training and testing subsets using train_test_split() from sklearn.model_selection, typically with an 80-20 split for training and testing respectively.
6.	Initialize and train a Linear Regression model from sklearn.linear_model using the training set's input features and target values.
7.	Evaluate the trained model on the test set using performance metrics such as the R² score and Mean Squared Error (MSE) from sklearn.metrics to quantify prediction accuracy.
"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)
ll = LinearRegression()
ll.fit(X_train, y_train)
y_pred = ll.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2S = r2_score(y_test, y_pred)
print(f"MSE = {mse} & R^2 Score = {r2S}")

"""8.	Generate a scatter plot comparing predicted versus actual median house values to visually assess the model’s prediction capability and identify any patterns or biases.
9.	Interpret the evaluation metrics and comment on the model's strengths and weaknesses, and discuss possible limitations such as linearity assumptions, outliers, or feature multicollinearity.
"""

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.3)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Actual Median House Value')
plt.ylabel('Predicted Median House Value')
plt.title('Actual vs. Predicted Median House Values (Normalized)')
plt.show()
plt.close()